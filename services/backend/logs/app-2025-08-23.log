{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:33'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:33'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:33'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:33'
}
{
  message: 'AI Service initialized with all sub-services',
  level: 'info',
  timestamp: '2025-08-23 15:29:33'
}
{
  message: 'Supabase clients initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Payment Service initialized with all sub-services',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Base Talent service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 15:29:34'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:23'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:23'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:23'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:23'
}
{
  message: 'AI Service initialized with all sub-services',
  level: 'info',
  timestamp: '2025-08-23 15:32:23'
}
{
  message: 'Supabase clients initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:23'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Payment Service initialized with all sub-services',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Base Talent service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Redis connected successfully',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Starting cache warming process',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'Cache warming completed successfully',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  environment: 'development',
  nodeVersion: 'v22.15.0',
  pid: 16957,
  level: 'info',
  message: 'üöÄ Server running on 0.0.0.0:3000',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'üìä Health check: http://0.0.0.0:3000/health',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'üèì Test endpoint: http://0.0.0.0:3000/api/test/health',
  level: 'info',
  timestamp: '2025-08-23 15:32:24'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'AI Service initialized with all sub-services',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Supabase clients initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Base Payment service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Payment Service initialized with all sub-services',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Base Talent service initialized',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 15:36:13'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 15:36:14'
}
{
  message: 'Redis connected successfully',
  level: 'info',
  timestamp: '2025-08-23 15:36:14'
}
{
  message: 'Starting cache warming process',
  level: 'info',
  timestamp: '2025-08-23 15:36:14'
}
{
  message: 'Cache warming completed successfully',
  level: 'info',
  timestamp: '2025-08-23 15:36:14'
}
{
  environment: 'development',
  nodeVersion: 'v22.15.0',
  pid: 19900,
  level: 'info',
  message: 'üöÄ Server running on 0.0.0.0:3000',
  timestamp: '2025-08-23 15:36:14'
}
{
  message: 'üìä Health check: http://0.0.0.0:3000/health',
  level: 'info',
  timestamp: '2025-08-23 15:36:14'
}
{
  message: 'üèì Test endpoint: http://0.0.0.0:3000/api/test/health',
  level: 'info',
  timestamp: '2025-08-23 15:36:14'
}
{
  message: '127.0.0.1 - - [23/Aug/2025:12:37:23 +0000] "GET /health HTTP/1.1" - - "-" "curl/8.5.0"',
  level: 'info',
  timestamp: '2025-08-23 15:37:23'
}
{
  message: '127.0.0.1 - - [23/Aug/2025:12:37:51 +0000] "GET /health HTTP/1.1" - - "-" "curl/8.5.0"',
  level: 'info',
  timestamp: '2025-08-23 15:37:51'
}
{
  message: '127.0.0.1 - - [23/Aug/2025:12:38:03 +0000] "GET /api/health HTTP/1.1" - - "-" "curl/8.5.0"',
  level: 'info',
  timestamp: '2025-08-23 15:38:03'
}
{
  message: 'Received SIGINT. Starting graceful shutdown...',
  level: 'info',
  timestamp: '2025-08-23 15:38:06'
}
{
  message: 'Supabase clients initialized',
  level: 'info',
  timestamp: '2025-08-23 15:41:46'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 15:41:46'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 15:41:46'
}
{
  message: 'Redis connected successfully',
  level: 'info',
  timestamp: '2025-08-23 15:41:46'
}
{
  message: 'Starting cache warming process',
  level: 'info',
  timestamp: '2025-08-23 15:41:46'
}
{
  message: 'Cache warming completed successfully',
  level: 'info',
  timestamp: '2025-08-23 15:41:46'
}
{
  environment: 'development',
  nodeVersion: 'v22.15.0',
  pid: 24395,
  level: 'info',
  message: 'üöÄ Server running on 0.0.0.0:3000',
  timestamp: '2025-08-23 15:41:46'
}
{
  message: 'üìä Health check: http://0.0.0.0:3000/health',
  level: 'info',
  timestamp: '2025-08-23 15:41:46'
}
{
  message: 'üèì Test endpoint: http://0.0.0.0:3000/api/test/health',
  level: 'info',
  timestamp: '2025-08-23 15:41:46'
}
{
  message: 'Received SIGTERM. Starting graceful shutdown...',
  level: 'info',
  timestamp: '2025-08-23 15:42:18'
}
{
  message: 'Supabase clients initialized',
  level: 'info',
  timestamp: '2025-08-23 15:42:19'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 15:42:19'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 15:42:19'
}
{
  message: 'Redis connected successfully',
  level: 'info',
  timestamp: '2025-08-23 15:42:19'
}
{
  message: 'Starting cache warming process',
  level: 'info',
  timestamp: '2025-08-23 15:42:19'
}
{
  message: 'Cache warming completed successfully',
  level: 'info',
  timestamp: '2025-08-23 15:42:19'
}
{
  environment: 'development',
  nodeVersion: 'v22.15.0',
  pid: 24630,
  level: 'info',
  message: 'üöÄ Server running on 0.0.0.0:3000',
  timestamp: '2025-08-23 15:42:19'
}
{
  message: 'üìä Health check: http://0.0.0.0:3000/health',
  level: 'info',
  timestamp: '2025-08-23 15:42:19'
}
{
  message: 'üèì Test endpoint: http://0.0.0.0:3000/api/test/health',
  level: 'info',
  timestamp: '2025-08-23 15:42:19'
}
{
  message: '127.0.0.1 - - [23/Aug/2025:12:42:20 +0000] "GET /health HTTP/1.1" 404 211 "-" "PostmanRuntime/7.45.0"',
  level: 'info',
  timestamp: '2025-08-23 15:42:20'
}
{
  method: 'GET',
  url: '/health',
  ip: '127.0.0.1',
  userAgent: 'PostmanRuntime/7.45.0',
  statusCode: 404,
  responseTime: '3ms',
  userId: undefined,
  level: 'warn',
  message: 'HTTP Request',
  timestamp: '2025-08-23 15:42:20'
}
{
  message: '127.0.0.1 - - [23/Aug/2025:12:42:44 +0000] "GET /health HTTP/1.1" 404 211 "-" "PostmanRuntime/7.45.0"',
  level: 'info',
  timestamp: '2025-08-23 15:42:44'
}
{
  method: 'GET',
  url: '/health',
  ip: '127.0.0.1',
  userAgent: 'PostmanRuntime/7.45.0',
  statusCode: 404,
  responseTime: '1ms',
  userId: undefined,
  level: 'warn',
  message: 'HTTP Request',
  timestamp: '2025-08-23 15:42:44'
}
{
  message: '127.0.0.1 - - [23/Aug/2025:12:43:31 +0000] "GET /health HTTP/1.1" 404 211 "-" "curl/8.5.0"',
  level: 'info',
  timestamp: '2025-08-23 15:43:31'
}
{
  method: 'GET',
  url: '/health',
  ip: '127.0.0.1',
  userAgent: 'curl/8.5.0',
  statusCode: 404,
  responseTime: '3ms',
  userId: undefined,
  level: 'warn',
  message: 'HTTP Request',
  timestamp: '2025-08-23 15:43:31'
}
{
  message: 'Received SIGINT. Starting graceful shutdown...',
  level: 'info',
  timestamp: '2025-08-23 15:43:55'
}
{
  success: true,
  message: 'Health check endpoint called Hello World! Server is healthy and running',
  timestamp: '2025-08-23 15:49:06',
  uptime: 23.620765699,
  environment: 'development',
  version: '1.0.0',
  status: 'OK',
  level: 'info'
}
{
  message: 'Test ping endpoint called',
  level: 'info',
  timestamp: '2025-08-23 15:49:11'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:51:47'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:51:47'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:51:54'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:51:54'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 17:53:24'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 17:53:24'
}
{
  operation: 'cache_get',
  duration: '523ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 17:53:24'
}
{
  content: '```json\n' +
    '[\n' +
    '  {\n' +
    '    "id": "q1",\n' +
    '    "question": "Can you explain the concept of virtual DOM in React and how it improves performance?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "The virtual DOM is an in-memory representation of the real DOM that React uses to optimize updates. It allows React to compute changes before they are applied to the real DOM, minimizing direct manipulation and improving performance.",\n' +
    '    "scoringCriteria": ["clarity of explanation", "understanding of performance benefits", "ability to articulate the concept"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q2",\n' +
    '    "question": "Describe a challenging bug you encountered in a React application. How did you troubleshoot and resolve it?",\n' +
    '    "type": "behavioral",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "A candidate should describe a specific bug, the steps taken to identify the root cause, the tools or techniques used for debugging, and how they ultimately resolved the issue.",\n' +
    '    "scoringCriteria": ["specificity of the example", "problem-solving approach", "reflection on the learning experience"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q3",\n' +
    '    "question": "How would you manage state in a large React application? Can you discuss the differences between local state, Redux, and Context API?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "Local state is suitable for component-specific state management, while Redux is used for global state management across the app, providing a predictable state container. The Context API can also manage global state but is better for less complex use cases or when avoiding prop drilling.",\n' +
    '    "scoringCriteria": ["understanding of state management options", "ability to differentiate between approaches", "practical application of knowledge"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q4",\n' +
    '    "question": "Tell me about a time you had to collaborate with a designer or backend developer. How did you ensure effective communication and alignment on the project?",\n' +
    '    "type": "behavioral",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "The candidate should discuss tools or methods used for communication, any challenges faced, and how they ensured that all parties were aligned on project goals and timelines.",\n' +
    '    "scoringCriteria": ["collaboration techniques", "communication skills", "ability to resolve conflicts"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q5",\n' +
    '    "question": "What are some best practices you follow when writing TypeScript in a React application? Can you provide an example?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    `    "expectedAnswer": "Best practices include using interfaces for props and state, leveraging type inference, avoiding 'any' type, and using generics when necessary. An example might include defining a component's props using an interface.",\n` +
    '    "scoringCriteria": ["knowledge of TypeScript best practices", "ability to provide examples", "understanding of type safety benefits"]\n' +
    '  }\n' +
    ']\n' +
    '```',
  error: 'Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  level: 'error',
  message: 'Failed to parse OpenAI response',
  timestamp: '2025-08-23 17:53:37'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '12496ms',
  success: false,
  attempt: 1,
  error: 'Failed to generate valid questions from AI response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 17:53:37'
}
{
  content: '```json\n' +
    '[\n' +
    '  {\n' +
    '    "id": "q1",\n' +
    '    "question": "Can you explain the concept of virtual DOM in React and how it improves performance?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "The virtual DOM is a lightweight representation of the real DOM. React updates the virtual DOM first, then calculates the most efficient way to update the real DOM, which improves performance by minimizing direct manipulations.",\n' +
    '    "scoringCriteria": ["understanding of virtual DOM", "ability to explain performance benefits", "clarity of explanation"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q2",\n' +
    '    "question": "Describe a challenging bug you encountered in a React application. How did you diagnose and fix it?",\n' +
    '    "type": "behavioral",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "The candidate should describe a specific bug, the debugging process, tools used, and the outcome of their fix.",\n' +
    '    "scoringCriteria": ["specificity of the bug description", "problem-solving approach", "outcome and learning"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q3",\n' +
    '    "question": "How would you handle state management in a large React application? What tools or libraries would you consider?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "For large applications, I would consider using Redux, Context API, or MobX for state management based on the complexity and requirements of the app.",\n' +
    '    "scoringCriteria": ["knowledge of state management tools", "understanding of application size impact", "ability to evaluate options"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q4",\n' +
    '    "question": "Tell me about a time when you had to collaborate with designers and backend developers. How did you ensure effective communication?",\n' +
    '    "type": "behavioral",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "The candidate should provide an example demonstrating how they facilitated communication, resolved conflicts, or coordinated efforts between teams.",\n' +
    '    "scoringCriteria": ["collaboration skills", "communication strategies", "impact on project success"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q5",\n' +
    '    "question": "What are the benefits of using TypeScript in a React application? Can you give an example of how it improves code quality?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "TypeScript provides static typing, which helps catch errors at compile time, enables better tooling and autocompletion, and improves code readability and maintainability.",\n' +
    '    "scoringCriteria": ["understanding of TypeScript benefits", "ability to provide examples", "clarity of explanation"]\n' +
    '  }\n' +
    ']\n' +
    '```',
  error: 'Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  level: 'error',
  message: 'Failed to parse OpenAI response',
  timestamp: '2025-08-23 17:53:48'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '24232ms',
  success: false,
  attempt: 2,
  error: 'Failed to generate valid questions from AI response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 17:53:48'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:53:58'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:53:58'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 17:54:28'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 17:54:28'
}
{
  operation: 'cache_get',
  duration: '465ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 17:54:28'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:54:37'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:54:37'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:54:38'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:54:38'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 17:56:15'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 17:56:16'
}
{
  operation: 'cache_get',
  duration: '336ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 17:56:16'
}
{
  content: '```json\n' +
    '[\n' +
    '  {\n' +
    '    "id": "q1",\n' +
    `    "question": "Can you explain how React's component lifecycle works and provide an example of a lifecycle method you have used?",\n` +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    `    "expectedAnswer": "React components go through several lifecycle phases. For example, 'componentDidMount' is called after a component is mounted, which is often used for fetching data.",\n` +
    '    "scoringCriteria": ["correctness of lifecycle explanation", "relevance of the example", "clarity of communication"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q2",\n' +
    '    "question": "Describe a challenging bug you encountered in a JavaScript application and how you went about solving it.",\n' +
    '    "type": "behavioral",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "An example of a specific bug, the steps taken to diagnose it, and the eventual resolution.",\n' +
    '    "scoringCriteria": ["clarity of the problem", "analysis of the solution process", "outcome of the resolution"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q3",\n' +
    '    "question": "How do you manage state in a React application? Can you contrast using local state with state management libraries like Redux?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "Local state is suitable for small components, while Redux is better for managing global state across the application.",\n' +
    '    "scoringCriteria": ["understanding of state management", "ability to compare approaches", "depth of knowledge"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q4",\n' +
    '    "question": "Tell me about a time you had to collaborate with backend developers. How did you ensure smooth communication and integration?",\n' +
    '    "type": "behavioral",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "Specifics about techniques used for collaboration, such as regular meetings, shared documentation, or API specifications.",\n' +
    '    "scoringCriteria": ["effectiveness of communication strategies", "examples of collaboration", "ability to work as a team player"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q5",\n' +
    '    "question": "What are some of the advantages of using TypeScript over JavaScript in a React application?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "TypeScript provides static typing, which helps catch errors at compile time, improves code readability, and enhances developer tooling.",\n' +
    '    "scoringCriteria": ["correctness of advantages listed", "depth of explanation", "understanding of TypeScript features"]\n' +
    '  }\n' +
    ']\n' +
    '```',
  error: 'Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  level: 'error',
  message: 'Failed to parse OpenAI response',
  timestamp: '2025-08-23 17:56:26'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '10342ms',
  success: false,
  attempt: 1,
  error: 'Failed to generate valid questions from AI response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 17:56:26'
}
{
  content: '```json\n' +
    '[\n' +
    '  {\n' +
    '    "id": "q1",\n' +
    '    "question": "Can you explain the difference between `props` and `state` in React?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    `    "expectedAnswer": "Props are used to pass data from parent to child components, while state is used to manage a component's internal data.",\n` +
    '    "scoringCriteria": ["clarity of explanation", "accuracy of terms", "depth of understanding"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q2",\n' +
    '    "question": "Describe a challenging bug you encountered in a React application and how you resolved it.",\n' +
    '    "type": "behavioral",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "The candidate should describe the bug, their troubleshooting process, and the final resolution.",\n' +
    '    "scoringCriteria": ["problem-solving skills", "communication", "reflection on the experience"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q3",\n' +
    '    "question": "How do you handle type safety in your React applications when using TypeScript?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    `    "expectedAnswer": "By defining interfaces or types for props and state, and using TypeScript's type-checking features to ensure safety.",\n` +
    '    "scoringCriteria": ["understanding of TypeScript", "practical application", "examples provided"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q4",\n' +
    '    "question": "Can you give an example of a time when you had to collaborate with other developers on a project? What tools did you use?",\n' +
    '    "type": "behavioral",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "The candidate should mention specific collaboration tools (like Git, Slack, etc.) and describe their role in the team.",\n' +
    '    "scoringCriteria": ["teamwork skills", "communication", "use of tools"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q5",\n' +
    '    "question": "What performance optimization techniques do you apply when developing React applications?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "Using techniques like memoization, lazy loading, code splitting, and optimizing component re-renders.",\n' +
    '    "scoringCriteria": ["knowledge of optimization techniques", "relevance of examples", "practical insights"]\n' +
    '  }\n' +
    ']\n' +
    '```',
  error: 'Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  level: 'error',
  message: 'Failed to parse OpenAI response',
  timestamp: '2025-08-23 17:56:36'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '20832ms',
  success: false,
  attempt: 2,
  error: 'Failed to generate valid questions from AI response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 17:56:36'
}
{
  content: '```json\n' +
    '[\n' +
    '  {\n' +
    '    "id": "q1",\n' +
    '    "question": "Can you explain the concept of a virtual DOM and how it is utilized in React?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "The virtual DOM is a lightweight copy of the actual DOM that React uses to optimize rendering. It allows React to efficiently update the UI by comparing changes between the virtual and real DOM.",\n' +
    '    "scoringCriteria": ["understanding of virtual DOM", "ability to explain benefits", "clarity of explanation"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q2",\n' +
    '    "question": "Describe a challenging bug you encountered while working with TypeScript. How did you resolve it?",\n' +
    '    "type": "behavioral",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "An example of a type-related issue that required debugging, the steps taken to identify and fix the bug, and what was learned from the experience.",\n' +
    '    "scoringCriteria": ["problem identification", "resolution steps", "learning outcomes"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q3",\n' +
    '    "question": "How do you manage state in a React application? Can you compare local state and global state management solutions?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "State can be managed using local state via hooks like useState, or through global state management solutions like Redux or Context API. Local state is suitable for component-level state, while global state is useful for shared data across components.",\n' +
    '    "scoringCriteria": ["understanding of state management", "comparison of methods", "depth of explanation"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q4",\n' +
    '    "question": "Tell me about a time you had to collaborate with designers or backend developers. How did you ensure effective communication?",\n' +
    '    "type": "behavioral",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "An example of a specific project, the challenges faced in communication, and the strategies employed to improve collaboration and understanding.",\n' +
    '    "scoringCriteria": ["collaboration strategies", "communication effectiveness", "teamwork experience"]\n' +
    '  },\n' +
    '  {\n' +
    '    "id": "q5",\n' +
    '    "question": "What are some key features of TypeScript that you find particularly useful when developing React applications?",\n' +
    '    "type": "technical",\n' +
    '    "difficulty": "medium",\n' +
    '    "expectedAnswer": "Key features include static typing, interfaces, and type inference, which help catch errors early, improve code readability, and support better tooling.",\n' +
    '    "scoringCriteria": ["knowledge of TypeScript features", "relevance to React", "ability to articulate benefits"]\n' +
    '  }\n' +
    ']\n' +
    '```',
  error: 'Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  level: 'error',
  message: 'Failed to parse OpenAI response',
  timestamp: '2025-08-23 17:56:51'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '35420ms',
  success: false,
  attempt: 3,
  error: 'Failed to generate valid questions from AI response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 17:56:51'
}
{
  message: 'Application Error Failed to generate valid questions from AI response',
  stack: 'Error: Failed to generate valid questions from AI response\n' +
    '    at QuestionGenerationRepository.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:135:13)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async BaseAIService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:39:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)\n' +
    '    at async Worker.retryIfFailed (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:1249:16)',
  name: 'Error',
  context: { operation: 'generate_questions', attempts: 3 },
  level: 'error',
  timestamp: '2025-08-23 17:56:51'
}
{
  error: 'Failed to generate valid questions from AI response',
  request: {
    jobTitle: 'Frontend Developer',
    skills: [ 'JavaScript', 'React', 'TypeScript' ],
    count: 5,
    difficulty: 'medium',
    type: 'mixed'
  },
  duration: 35759,
  level: 'error',
  message: 'Failed to generate questions',
  timestamp: '2025-08-23 17:56:51'
}
{
  operation: 'cache_get',
  duration: '62ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 17:56:53'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:57:05'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:57:05'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:57:12'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:57:12'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:57:24'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:57:24'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:57:38'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:57:38'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:57:52'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:57:52'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 17:57:52'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 17:57:52'
}
{
  operation: 'cache_get',
  duration: '354ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 17:57:52'
}
{
  operation: 'cache_get',
  duration: '60ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 17:57:52'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:57:59'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:57:59'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:58:06'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:58:06'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 17:59:01'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 17:59:01'
}
{
  operation: 'cache_get',
  duration: '465ms',
  key: 'smart-recruiter:smart-recruiter:questions:9867ff37',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 17:59:01'
}
{
  operation: 'cache_get',
  duration: '60ms',
  key: 'smart-recruiter:smart-recruiter:questions:9867ff37',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 17:59:01'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain how you would design a RESTful API using Node.js? Please include considerations for routing, middleware, and error handling.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "A clear explanation of REST principles, API structure, using Express for routing, and handling errors with middleware.",\n' +
      '    "scoringCriteria": ["understanding of REST principles", "knowledge of Node.js and Express", "clarity in error handling"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a scenario where you had to optimize a SQL query for better performance. What steps did you take?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Details on analyzing the query, using indexes, and possibly restructuring the query for efficiency.",\n' +
      '    "scoringCriteria": ["problem identification", "techniques used for optimization", "impact of changes"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "How do you prioritize tasks when working on multiple projects simultaneously? Can you provide an example?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "An example illustrating a method of prioritization (e.g., Eisenhower Matrix) and how it helped in a specific situation.",\n' +
      '    "scoringCriteria": ["clarity in prioritization method", "relevance of example", "ability to manage time effectively"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 17:59:08'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '6204ms',
  success: false,
  attempt: 1,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 17:59:08'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain how to create a RESTful API using Node.js? Please describe the structure and key components.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "A RESTful API can be created using Node.js with Express framework. Key components include defining routes, handling HTTP methods (GET, POST, PUT, DELETE), and using middleware for error handling and response formatting.",\n' +
      '    "scoringCriteria": ["understanding of REST principles", "ability to describe Node.js and Express usage", "clarity of explanation"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "How would you optimize SQL queries to improve performance in a high-traffic application?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Optimization techniques include using indexes, avoiding SELECT *, analyzing query execution plans, and minimizing subqueries and joins when possible.",\n' +
      '    "scoringCriteria": ["knowledge of SQL optimization techniques", "ability to provide practical examples", "understanding of indexing and execution plans"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "Describe a situation where you had to troubleshoot a backend issue. What steps did you take and what was the outcome?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should describe a specific issue, detail the troubleshooting steps taken (such as logging, analyzing error messages, and testing), and explain the resolution and what they learned from the situation.",\n' +
      '    "scoringCriteria": ["clarity of the situation described", "effectiveness of troubleshooting process", "reflection on learning and improvement"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 17:59:16'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '14354ms',
  success: false,
  attempt: 2,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 17:59:16'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain how you would implement a RESTful API using Node.js, and what best practices you would follow?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "A brief explanation of setting up an Express server, defining routes, handling requests, using middleware, and implementing proper error handling and validation.",\n' +
      '    "scoringCriteria": ["clarity of explanation", "knowledge of Node.js and Express", "understanding of REST principles", "mention of best practices"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "How would you approach optimizing a slow SQL query? Can you provide an example of a technique you might use?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Discussion on using indexes, analyzing query execution plans, or rewriting the query for efficiency, with a specific example.",\n' +
      '    "scoringCriteria": ["ability to identify performance issues", "knowledge of SQL optimization techniques", "example relevance", "problem-solving approach"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "Describe a challenging problem you faced in a previous project involving backend development. How did you resolve it?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "A clear description of the problem, the steps taken to analyze and resolve it, and the outcome, emphasizing teamwork and communication if applicable.",\n' +
      '    "scoringCriteria": ["clarity of the problem description", "problem-solving process", "impact of the resolution", "teamwork and communication skills"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 17:59:24'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '23009ms',
  success: false,
  attempt: 3,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 17:59:24'
}
{
  message: 'Application Error Failed to parse questions response',
  stack: 'Error: Failed to parse questions response\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:107:13)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)\n' +
    '    at async Worker.retryIfFailed (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:1249:16)',
  name: 'Error',
  context: { operation: 'generate_questions', attempts: 3 },
  level: 'error',
  timestamp: '2025-08-23 17:59:24'
}
{
  error: 'Failed to parse questions response',
  request: {
    jobTitle: 'Backend Developer',
    skills: [ 'Node.js', 'Python', 'SQL' ],
    count: 3,
    difficulty: 'medium',
    type: 'technical'
  },
  duration: 23535,
  level: 'error',
  message: 'Failed to generate questions',
  timestamp: '2025-08-23 17:59:24'
}
{
  operation: 'cache_get',
  duration: '60ms',
  key: 'smart-recruiter:smart-recruiter:questions:9867ff37',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 17:59:26'
}
{
  operation: 'cache_get',
  duration: '60ms',
  key: 'smart-recruiter:smart-recruiter:questions:9867ff37',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 17:59:26'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain how you would set up a RESTful API using Node.js? Please include details on routing, middleware, and database interaction.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should describe setting up an Express server, defining routes, utilizing middleware for request handling, and connecting to a SQL database for CRUD operations.",\n' +
      '    "scoringCriteria": ["clarity of explanation", "correct use of Node.js concepts", "understanding of RESTful principles", "ability to connect to a database"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a scenario where you had to optimize a SQL query. What steps did you take to improve its performance?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should mention analyzing the query execution plan, indexing, avoiding unnecessary columns, and possibly rewriting the query for efficiency.",\n' +
      '    "scoringCriteria": ["identification of optimization techniques", "problem-solving skills", "knowledge of SQL performance tuning", "real-world application of concepts"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "How do you handle errors in your backend applications? Can you provide an example of a time when you implemented error handling in Node.js or Python?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should discuss try-catch blocks, error logging, and possibly using middleware in Node.js to handle errors globally.",\n' +
      '    "scoringCriteria": ["understanding of error handling techniques", "ability to provide a real-world example", "comprehension of best practices", "clarity in communication"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 17:59:33'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '6875ms',
  success: false,
  attempt: 1,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 17:59:33'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:59:40'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 17:59:40'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 18:00:40'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 18:00:40'
}
{
  operation: 'cache_get',
  duration: '526ms',
  key: 'smart-recruiter:smart-recruiter:questions:9867ff37',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:00:40'
}
{
  operation: 'cache_get',
  duration: '116ms',
  key: 'smart-recruiter:smart-recruiter:questions:9867ff37',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:00:40'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "1",\n' +
      '    "question": "Can you explain how to handle asynchronous operations in Node.js and provide an example of using Promises?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      `    "expectedAnswer": "Asynchronous operations can be handled using Promises and async/await. An example would be using 'fetch' to make an API call and returning a Promise that resolves when data is received.",\n` +
      '    "scoringCriteria": [\n' +
      '      "Understanding of asynchronous programming in Node.js",\n' +
      '      "Ability to provide a clear example",\n' +
      '      "Correct use of Promises or async/await"\n' +
      '    ]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "2",\n' +
      '    "question": "How would you optimize a SQL query that is running slower than expected? Describe at least two strategies.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Strategies include using indexing to speed up data retrieval and analyzing the query execution plan to identify bottlenecks.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Knowledge of SQL optimization techniques",\n' +
      '      "Ability to articulate specific strategies",\n' +
      '      "Understanding of when to use each strategy"\n' +
      '    ]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "3",\n' +
      `    "question": "Describe a challenging technical project you've worked on. What were the key challenges, and how did you address them?",\n` +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should describe a specific project, outline the challenges faced, and explain the solutions implemented, showcasing problem-solving skills.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Clarity in describing the project and challenges",\n' +
      '      "Effectiveness of the solutions implemented",\n' +
      '      "Reflection on lessons learned from the experience"\n' +
      '    ]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:00:50'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '9298ms',
  success: false,
  attempt: 1,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:00:50'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "How would you implement a RESTful API in Node.js that interacts with a SQL database? Please outline the key components involved.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should mention setting up an Express server, defining routes, using middleware for parsing requests, connecting to a SQL database (e.g., using Sequelize or Knex.js), and handling CRUD operations.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Understanding of RESTful principles",\n' +
      '      "Knowledge of Express framework",\n' +
      '      "Ability to connect and interact with SQL databases"\n' +
      '    ]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "In Python, how can you handle exceptions when querying a SQL database? Provide an example.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should describe using try-except blocks to handle exceptions, and may provide a code snippet showing how to catch specific exceptions (e.g., IntegrityError, OperationalError) and handle them appropriately.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Correct use of try-except blocks",\n' +
      '      "Understanding of database exceptions",\n' +
      '      "Ability to provide a relevant code example"\n' +
      '    ]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "Describe a situation where you had to optimize a slow SQL query. What steps did you take and what was the outcome?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should provide a specific example, outline the tools or techniques used (such as indexing, query rewriting, or analyzing execution plans), and describe the impact of the optimization on performance.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Clarity of the situation described",\n' +
      '      "Specificity of the optimization steps taken",\n' +
      '      "Quantifiable results or improvements achieved"\n' +
      '    ]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:00:59'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '18663ms',
  success: false,
  attempt: 2,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:00:59'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain how you would implement a RESTful API using Node.js? Please describe the structure and any key components you would include.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "A clear explanation of using Express.js for routing, middleware for handling requests, and response formatting, along with a demonstration of handling CRUD operations.",\n' +
      '    "scoringCriteria": ["clarity of explanation", "knowledge of REST principles", "understanding of Node.js and Express.js"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a scenario where you had to optimize a SQL query. What steps did you take to identify and resolve the performance issue?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Identification of slow queries using EXPLAIN, indexing strategies, and rewriting the query for efficiency.",\n' +
      '    "scoringCriteria": ["problem identification", "knowledge of SQL performance optimization", "effectiveness of solution"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "How do you handle version control in your projects, and what best practices do you follow when collaborating with a team?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Discussion of using Git for version control, branching strategies, commit message conventions, and code review practices.",\n' +
      '    "scoringCriteria": ["understanding of version control", "collaboration skills", "commitment to best practices"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:01:09'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '28233ms',
  success: false,
  attempt: 3,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:01:09'
}
{
  message: 'Application Error Failed to parse questions response',
  stack: 'Error: Failed to parse questions response\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:107:13)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)\n' +
    '    at async Worker.retryIfFailed (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:1249:16)',
  name: 'Error',
  context: { operation: 'generate_questions', attempts: 3 },
  level: 'error',
  timestamp: '2025-08-23 18:01:09'
}
{
  error: 'Failed to parse questions response',
  request: {
    jobTitle: 'Backend Developer',
    skills: [ 'Node.js', 'Python', 'SQL' ],
    count: 3,
    difficulty: 'medium',
    type: 'technical'
  },
  duration: 28877,
  level: 'error',
  message: 'Failed to generate questions',
  timestamp: '2025-08-23 18:01:09'
}
{
  operation: 'cache_get',
  duration: '60ms',
  key: 'smart-recruiter:smart-recruiter:questions:9867ff37',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:01:13'
}
{
  operation: 'cache_get',
  duration: '60ms',
  key: 'smart-recruiter:smart-recruiter:questions:9867ff37',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:01:13'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain how you would implement a RESTful API using Node.js? Please mention key components and best practices.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "A RESTful API can be implemented using Express.js in Node.js, utilizing routes for handling requests, middleware for processing data, and adhering to REST principles such as statelessness and resource-based URLs.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Understanding of REST principles",\n' +
      '      "Knowledge of Express.js and middleware",\n' +
      '      "Ability to articulate best practices"\n' +
      '    ]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a scenario where you had to optimize a SQL query. What steps did you take and what was the outcome?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "I analyzed the query execution plan, identified missing indexes, and optimized the query structure. These changes resulted in a significant reduction in response time.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Ability to analyze query performance",\n' +
      '      "Knowledge of indexing and query optimization techniques",\n' +
      '      "Clarity in explaining steps taken"\n' +
      '    ]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      `    "question": "How do you handle errors in your backend applications? Can you give an example of an error-handling strategy you've implemented?",\n` +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "I implement centralized error handling using middleware in Express.js, logging errors for debugging, and returning appropriate HTTP status codes and messages to the client. For instance, using a try-catch block around async operations.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Understanding of error handling in Node.js",\n' +
      '      "Clarity in explaining strategies",\n' +
      '      "Awareness of logging and client communication"\n' +
      '    ]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:01:22'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '9129ms',
  success: false,
  attempt: 1,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:01:22'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "How would you implement a RESTful API using Node.js? Please outline the key components and their responsibilities.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "A brief outline including Express.js for routing, middleware for handling requests, controllers for business logic, and a database connection for data operations.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Clarity of explanation",\n' +
      '      "Understanding of REST architecture",\n' +
      '      "Knowledge of middleware and routing in Node.js"\n' +
      '    ]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Can you explain how to connect a Python application to a SQL database? What libraries would you use and why?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Mention libraries like SQLAlchemy or psycopg2 for PostgreSQL, and explain how to establish a connection and execute queries.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Knowledge of Python database libraries",\n' +
      '      "Ability to explain connection process",\n' +
      '      "Understanding of executing SQL queries"\n' +
      '    ]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "Describe a challenging bug you encountered in a backend application. How did you identify and fix it?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "A concise story detailing the bug, the debugging process, and the solution implemented.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Problem-solving skills",\n' +
      '      "Ability to articulate the debugging process",\n' +
      '      "Reflection on the learning outcome"\n' +
      '    ]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:01:30'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '16862ms',
  success: false,
  attempt: 2,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:01:30'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "backend_dev_q1",\n' +
      '    "question": "Can you explain how you would design a RESTful API using Node.js? Please outline the main components and their interactions.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "A RESTful API design includes defining endpoints, using appropriate HTTP methods, and managing data in a database. Components include routers, controllers, middleware, and models.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Clarity in explaining components",\n' +
      '      "Understanding of REST principles",\n' +
      '      "Ability to describe integration with a database"\n' +
      '    ]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "backend_dev_q2",\n' +
      '    "question": "Describe a scenario where you had to optimize a SQL query. What steps did you take, and what was the outcome?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Identified slow queries, used indexes, analyzed execution plans, and tested performance improvements, resulting in faster query execution.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Specificity of the scenario",\n' +
      '      "Understanding of SQL optimization techniques",\n' +
      '      "Outcome and measurable results"\n' +
      '    ]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "backend_dev_q3",\n' +
      '    "question": "In a project where you had to work with both Node.js and Python, how did you manage communication between services written in different programming languages?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Used REST APIs or message queues to facilitate communication, ensuring data was shared effectively between services.",\n' +
      '    "scoringCriteria": [\n' +
      '      "Knowledge of inter-service communication methods",\n' +
      '      "Clarity in explaining the solution",\n' +
      '      "Consideration of performance and scalability"\n' +
      '    ]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:01:40'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '27095ms',
  success: false,
  attempt: 3,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:01:40'
}
{
  message: 'Application Error Failed to parse questions response',
  stack: 'Error: Failed to parse questions response\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:107:13)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:102:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)\n' +
    '    at async Worker.retryIfFailed (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:1249:16)',
  name: 'Error',
  context: { operation: 'generate_questions', attempts: 3 },
  level: 'error',
  timestamp: '2025-08-23 18:01:40'
}
{
  error: 'Failed to parse questions response',
  request: {
    jobTitle: 'Backend Developer',
    skills: [ 'Node.js', 'Python', 'SQL' ],
    count: 3,
    difficulty: 'medium',
    type: 'technical'
  },
  duration: 27216,
  level: 'error',
  message: 'Failed to generate questions',
  timestamp: '2025-08-23 18:01:40'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:01:59'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:01:59'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:02:20'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:02:20'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 18:02:44'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 18:02:44'
}
{
  operation: 'cache_get',
  duration: '399ms',
  key: 'smart-recruiter:smart-recruiter:questions:8145cd78',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:02:44'
}
{
  operation: 'cache_get',
  duration: '78ms',
  key: 'smart-recruiter:smart-recruiter:questions:8145cd78',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:02:44'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:77:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async QuestionGenerationController.generateQuestionsSync (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/controllers/question-generation.controller.ts:251:25)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      `    "question": "Can you explain the purpose of the 'useState' hook in React and provide a simple example of how to use it?",\n` +
      '    "type": "technical",\n' +
      '    "difficulty": "easy",\n' +
      `    "expectedAnswer": "The 'useState' hook is used to add state to functional components in React. An example would be initializing a counter: const [count, setCount] = useState(0);",\n` +
      '    "scoringCriteria": ["Correct explanation of useState", "Provides a relevant example", "Usage of correct syntax"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "What is the difference between a class component and a functional component in React? Give an example where you would use one over the other.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "easy",\n' +
      '    "expectedAnswer": "Class components can hold state and lifecycle methods, while functional components are simpler and can use hooks. Functional components are preferred for their simplicity, especially for presentational components.",\n' +
      '    "scoringCriteria": ["Correctly identifies differences", "Provides appropriate examples", "Explains use cases clearly"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:02:50'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '5962ms',
  success: false,
  attempt: 1,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:02:50'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:77:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async QuestionGenerationController.generateQuestionsSync (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/controllers/question-generation.controller.ts:251:25)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      `    "question": "Can you explain the difference between 'null' and 'undefined' in JavaScript?",\n` +
      '    "type": "technical",\n' +
      '    "difficulty": "easy",\n' +
      `    "expectedAnswer": "'null' is an assignment value that represents no value, while 'undefined' means a variable has been declared but not assigned a value.",\n` +
      '    "scoringCriteria": ["correctness of explanation", "clarity of answer"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      `    "question": "How would you create a simple React component that displays 'Hello, World!'?",\n` +
      '    "type": "technical",\n' +
      '    "difficulty": "easy",\n' +
      `    "expectedAnswer": "A functional component can be created using 'const HelloWorld = () => <h1>Hello, World!</h1>;' and rendered using '<HelloWorld />'.",\n` +
      '    "scoringCriteria": ["correctness of code", "understanding of React components"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:02:57'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '12799ms',
  success: false,
  attempt: 2,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:02:57'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:77:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async QuestionGenerationController.generateQuestionsSync (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/controllers/question-generation.controller.ts:251:25)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain the difference between state and props in React?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "easy",\n' +
      '    "expectedAnswer": "State is managed within the component and can change over time, while props are passed from parent to child components and are immutable.",\n' +
      '    "scoringCriteria": ["clarity of explanation", "understanding of concepts"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Write a simple React component that displays a button, and when clicked, increments a counter displayed on the screen.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "easy",\n' +
      '    "expectedAnswer": "A functional component using useState that renders a button and a counter, increments the counter on button click.",\n' +
      '    "scoringCriteria": ["correctness", "use of hooks", "code readability"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:03:04'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '19378ms',
  success: false,
  attempt: 3,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:03:04'
}
{
  message: 'Application Error Failed to parse questions response',
  stack: 'Error: Failed to parse questions response\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:107:13)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:77:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async QuestionGenerationController.generateQuestionsSync (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/controllers/question-generation.controller.ts:251:25)',
  name: 'Error',
  context: { operation: 'generate_questions', attempts: 3 },
  level: 'error',
  timestamp: '2025-08-23 18:03:04'
}
{
  error: 'Failed to parse questions response',
  request: {
    jobTitle: 'Software Engineer',
    skills: [ 'JavaScript', 'React' ],
    count: 2,
    difficulty: 'easy',
    type: 'technical'
  },
  duration: 19857,
  level: 'error',
  message: 'Failed to generate questions',
  timestamp: '2025-08-23 18:03:04'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:03:40'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:03:40'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:03:42'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:03:42'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:08:16'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:08:16'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:08:31'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:08:31'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 18:08:58'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 18:08:58'
}
{
  operation: 'cache_get',
  duration: '531ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:08:58'
}
{
  operation: 'cache_get',
  duration: '62ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:08:58'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:84:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain the differences between JavaScript and TypeScript? Why might you choose to use TypeScript in a project?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "TypeScript is a superset of JavaScript that adds static typing. You might choose TypeScript for better tooling, improved error detection, and enhanced code maintainability.",\n' +
      '    "scoringCriteria": ["accuracy of explanation", "understanding of benefits", "clarity of response"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a challenging bug you encountered in a React application. How did you diagnose and resolve the issue?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      `    "expectedAnswer": "I encountered a state management issue where components were not re-rendering as expected. I used React DevTools to trace the state changes and found a missing key in the component's useEffect hook. After correcting it, the issue was resolved.",\n` +
      '    "scoringCriteria": ["problem-solving approach", "communication skills", "outcome of the situation"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "How would you implement a responsive design in a React application? Can you discuss any libraries or techniques you prefer?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "I would use CSS media queries and possibly a library like styled-components or Bootstrap for responsive layouts. I focus on mobile-first design principles and ensure components adapt to different screen sizes.",\n' +
      '    "scoringCriteria": ["knowledge of responsive design", "familiarity with libraries", "practical application"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q4",\n' +
      '    "question": "Imagine you are working on a team project where there are conflicting opinions about the use of certain libraries. How would you handle this situation?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      `    "expectedAnswer": "I would facilitate a discussion to understand each person's perspective and the reasons behind their preferences. We could evaluate the pros and cons together, possibly consult documentation or benchmarks, and ultimately aim for a consensus that aligns with the project goals.",\n` +
      '    "scoringCriteria": ["collaboration skills", "conflict resolution", "ability to facilitate discussions"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q5",\n' +
      '    "question": "Can you provide an example of how you have utilized hooks in React? What are some rules you follow when using them?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "I used the useState hook to manage form inputs and the useEffect hook for fetching data when the component mounts. I follow the rules of hooks, such as only calling them at the top level and not inside loops or conditions.",\n' +
      '    "scoringCriteria": ["understanding of hooks", "application of rules", "clarity and detail of example"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:09:12'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '14071ms',
  success: false,
  attempt: 1,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:09:12'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:84:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      `    "question": "Can you explain how React's component lifecycle works and how you can leverage it in a project?",\n` +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should explain the lifecycle phases: mounting, updating, and unmounting, and provide examples of lifecycle methods like componentDidMount or useEffect.",\n' +
      '    "scoringCriteria": ["understanding of lifecycle phases", "ability to provide examples", "clarity of explanation"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a challenging bug you encountered in a TypeScript project. How did you identify and resolve it?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should detail the bug, their debugging process, and the resolution, highlighting their problem-solving skills.",\n' +
      '    "scoringCriteria": ["specificity of the example", "problem-solving approach", "clarity in communication"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "How would you approach optimizing the performance of a React application?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should mention techniques such as code splitting, memoization, lazy loading, and optimizing rendering.",\n' +
      '    "scoringCriteria": ["knowledge of optimization techniques", "ability to explain concepts", "practical application examples"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q4",\n' +
      '    "question": "Imagine you receive conflicting feedback on a UI component from two different team members. How would you handle this situation?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should describe a collaborative approach, focusing on communication, seeking clarity, and possibly facilitating a discussion between the parties involved.",\n' +
      '    "scoringCriteria": ["conflict resolution skills", "communication strategy", "team collaboration approach"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q5",\n' +
      '    "question": "Can you discuss the advantages and disadvantages of using TypeScript over JavaScript in a frontend project?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should cover type safety, better tooling, and maintainability as advantages, while also mentioning potential drawbacks like increased complexity or learning curve.",\n' +
      '    "scoringCriteria": ["understanding of TypeScript benefits", "awareness of limitations", "ability to articulate points clearly"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:09:24'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '25859ms',
  success: false,
  attempt: 2,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:09:24'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:84:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain how you would manage state in a React application using TypeScript? Please provide an example.",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      `    "expectedAnswer": "Using React's useState or useReducer hooks, along with TypeScript interfaces for state types.",\n` +
      '    "scoringCriteria": ["correct understanding of state management", "clarity of the example", "proper use of TypeScript"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a time when you faced a challenge while implementing a feature in a frontend application. How did you resolve it?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Candidate should describe a specific situation, the actions taken, and the results achieved.",\n' +
      '    "scoringCriteria": ["specificity of the situation", "problem-solving skills", "outcomes and learning"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "How do you ensure that your React components are reusable and maintainable? What best practices do you follow?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "By using props effectively, breaking components down into smaller pieces, and following a consistent styling approach.",\n' +
      '    "scoringCriteria": ["knowledge of component design principles", "ability to articulate best practices", "examples of reusability"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q4",\n' +
      '    "question": "Imagine you have to refactor a legacy JavaScript codebase to TypeScript. What steps would you take to ensure a smooth transition?",\n' +
      '    "type": "situational",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Start with a plan, convert files gradually, ensure types are defined, and run tests to catch errors.",\n' +
      '    "scoringCriteria": ["structured approach to refactoring", "consideration of testing", "understanding of TypeScript benefits"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q5",\n' +
      `    "question": "How do you handle feedback on your code, especially if it's critical? Can you give an example of how you've incorporated feedback in the past?",\n` +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "I view feedback as a growth opportunity, and I‚Äôve made changes based on constructive criticism in previous projects.",\n' +
      '    "scoringCriteria": ["receptiveness to feedback", "specific example of change", "personal growth reflection"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:09:35'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '36334ms',
  success: false,
  attempt: 3,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:09:35'
}
{
  message: 'Application Error Failed to parse questions response',
  stack: 'Error: Failed to parse questions response\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:107:13)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:84:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)\n' +
    '    at async Worker.retryIfFailed (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:1249:16)',
  name: 'Error',
  context: { operation: 'generate_questions', attempts: 3 },
  level: 'error',
  timestamp: '2025-08-23 18:09:35'
}
{
  error: 'Failed to parse questions response',
  request: {
    jobTitle: 'Frontend Developer',
    skills: [ 'JavaScript', 'React', 'TypeScript' ],
    count: 5,
    difficulty: 'medium',
    type: 'mixed'
  },
  duration: 36930,
  level: 'error',
  message: 'Failed to generate questions',
  timestamp: '2025-08-23 18:09:35'
}
{
  operation: 'cache_get',
  duration: '59ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:09:37'
}
{
  operation: 'cache_get',
  duration: '64ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:09:37'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:84:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain how you would optimize the performance of a React application?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "By using techniques such as code splitting, lazy loading, memoization, and optimizing component rendering.",\n' +
      '    "scoringCriteria": ["clarity of explanation", "relevance of techniques mentioned", "depth of knowledge"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a situation where you faced a challenge while working with TypeScript. How did you overcome it?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Candidate should describe a specific challenge and detail the steps taken to resolve it, demonstrating problem-solving skills.",\n' +
      '    "scoringCriteria": ["specificity of the challenge", "problem-solving approach", "outcome of the situation"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "What strategies do you use to ensure your JavaScript code is maintainable and easy to understand for other developers?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Using clear naming conventions, modular code structure, comments, and adhering to coding standards.",\n' +
      '    "scoringCriteria": ["understanding of best practices", "examples of strategies", "ability to communicate effectively"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q4",\n' +
      '    "question": "Imagine you are assigned to a project that requires tight deadlines. How would you prioritize tasks while developing a React application?",\n' +
      '    "type": "situational",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Prioritize core functionality first, communicate with stakeholders, and make use of agile methodologies to adapt as needed.",\n' +
      '    "scoringCriteria": ["prioritization skills", "understanding of agile principles", "communication with team members"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q5",\n' +
      '    "question": "How do you stay updated with the latest trends and changes in frontend development, especially in JavaScript and React?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "By following industry blogs, attending webinars, participating in online communities, and experimenting with new technologies in personal projects.",\n' +
      '    "scoringCriteria": ["proactiveness in learning", "specific resources mentioned", "commitment to professional growth"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:09:45'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '8445ms',
  success: false,
  attempt: 1,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:09:45'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:84:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain the key differences between JavaScript and TypeScript, and why you would choose to use TypeScript in a React project?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "TypeScript is a superset of JavaScript that adds static typing, which helps catch errors at compile time. It also provides better tooling and autocompletion. Choosing TypeScript can improve code maintainability and readability in larger React projects.",\n' +
      '    "scoringCriteria": ["clarity of explanation", "understanding of TypeScript benefits", "relevance to React projects"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a challenging bug you encountered in a React application. How did you approach debugging it and what was the outcome?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should describe a specific bug, their debugging process (such as using console logs, React DevTools, etc.), and how they resolved the issue, highlighting problem-solving skills.",\n' +
      '    "scoringCriteria": ["specificity of the example", "problem-solving approach", "outcome of the situation"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "How would you optimize the performance of a React application? Can you provide examples of techniques or tools you would use?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Techniques may include code splitting, lazy loading components, using React.memo, optimizing component re-renders, or employing tools like React Profiler to identify bottlenecks.",\n' +
      '    "scoringCriteria": ["knowledge of performance optimization techniques", "practical examples provided", "understanding of React-specific tools"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q4",\n' +
      `    "question": "Imagine you are working on a team project where you disagree with a teammate's approach to implementing a feature. How would you handle this situation?",\n` +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should demonstrate effective communication skills, willingness to listen, and suggest a constructive discussion to find common ground or compromise on the implementation strategy.",\n' +
      '    "scoringCriteria": ["communication skills", "ability to collaborate", "conflict resolution strategy"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q5",\n' +
      '    "question": "What are the advantages of using React Hooks over class components? Can you provide a scenario where you would prefer Hooks?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "React Hooks offer a simpler way to manage state and side effects in functional components. They allow for cleaner code and easier reuse of stateful logic. A scenario might involve using the useEffect hook to manage API calls in a functional component.",\n' +
      '    "scoringCriteria": ["understanding of React Hooks", "ability to compare with class components", "practical application scenario"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:09:58'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '21175ms',
  success: false,
  attempt: 2,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:09:58'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:84:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain the concept of virtual DOM in React and how it improves performance?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The virtual DOM is a lightweight copy of the actual DOM. React uses it to optimize updates by calculating the differences between the virtual DOM and the actual DOM, which reduces the number of direct manipulations and improves performance.",\n' +
      '    "scoringCriteria": ["clarity of explanation", "understanding of performance implications"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a challenging bug you encountered in a React application and how you resolved it.",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should describe a specific bug, the steps taken to diagnose and fix it, and any tools or methodologies they used.",\n' +
      '    "scoringCriteria": ["specificity of example", "problem-solving approach"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "How would you approach optimizing a React application for better loading times?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "By implementing code splitting, lazy loading components, using production builds, optimizing images, and minimizing CSS and JS files.",\n' +
      '    "scoringCriteria": ["relevance of solutions", "depth of optimization strategies"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q4",\n' +
      '    "question": "Imagine you are working on a team project and you disagree with a teammate about a decision regarding component structure. How would you handle this situation?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should express the importance of open communication, discussing the differing viewpoints, and collaborating to reach a consensus or compromise.",\n' +
      '    "scoringCriteria": ["communication skills", "collaborative mindset"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q5",\n' +
      '    "question": "What are the advantages and disadvantages of using TypeScript in a React project?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Advantages include type safety, improved tooling, and better documentation. Disadvantages may involve a steeper learning curve and additional setup time.",\n' +
      '    "scoringCriteria": ["understanding of TypeScript", "ability to weigh pros and cons"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:10:08'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '31149ms',
  success: false,
  attempt: 3,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:10:08'
}
{
  message: 'Application Error Failed to parse questions response',
  stack: 'Error: Failed to parse questions response\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:107:13)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:84:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)\n' +
    '    at async Worker.retryIfFailed (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:1249:16)',
  name: 'Error',
  context: { operation: 'generate_questions', attempts: 3 },
  level: 'error',
  timestamp: '2025-08-23 18:10:08'
}
{
  error: 'Failed to parse questions response',
  request: {
    jobTitle: 'Frontend Developer',
    skills: [ 'JavaScript', 'React', 'TypeScript' ],
    count: 5,
    difficulty: 'medium',
    type: 'mixed'
  },
  duration: 31274,
  level: 'error',
  message: 'Failed to generate questions',
  timestamp: '2025-08-23 18:10:08'
}
{
  operation: 'cache_get',
  duration: '69ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:10:12'
}
{
  operation: 'cache_get',
  duration: '63ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:10:12'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:84:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain how you would manage the state in a React application using TypeScript?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      `    "expectedAnswer": "Use React's Context API or libraries like Redux for state management, while ensuring type safety with TypeScript.",\n` +
      '    "scoringCriteria": ["understanding of state management", "ability to integrate TypeScript"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a challenging bug you encountered in a JavaScript application. How did you approach debugging it?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Candidate should describe the bug, the tools or methods used for debugging, and the resolution process.",\n' +
      '    "scoringCriteria": ["problem-solving skills", "effective communication"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "How do you ensure that your React components are reusable and maintainable?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "By using props for customization, keeping components small, and following DRY and SOLID principles.",\n' +
      '    "scoringCriteria": ["understanding of component design", "knowledge of best practices"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q4",\n' +
      '    "question": "Imagine you are working on a team project where the frontend needs to integrate with a backend API. What steps would you take to ensure a smooth integration?",\n' +
      '    "type": "situational",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Communicate with backend developers to understand the API, test endpoints, and handle data effectively in the frontend.",\n' +
      '    "scoringCriteria": ["collaboration skills", "proactive communication"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q5",\n' +
      '    "question": "How do you keep up with the latest trends and best practices in frontend development, particularly with React and TypeScript?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Regularly read blogs, follow influential developers, and participate in online communities or local meetups.",\n' +
      '    "scoringCriteria": ["commitment to continuous learning", "engagement with the developer community"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:10:20'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '8198ms',
  success: false,
  attempt: 1,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:10:20'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:84:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain the difference between a functional component and a class component in React? When would you choose one over the other?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Functional components are simpler and do not have lifecycle methods, while class components can hold their own state and lifecycle methods. Functional components are preferred for simpler UI and when using hooks.",\n' +
      '    "scoringCriteria": ["accuracy of explanation", "understanding of React concepts", "clarity of response"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a challenging bug you encountered in a React application. How did you identify and resolve it?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "The candidate should describe the bug, the debugging process, and the resolution steps taken, demonstrating problem-solving skills.",\n' +
      '    "scoringCriteria": ["clarity of the bug description", "effectiveness of the solution", "insight into debugging process"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "How do you manage state in a React application using TypeScript? Can you provide an example?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      `    "expectedAnswer": "Using TypeScript's interfaces to define state types and utilizing React's useState and useReducer hooks for state management.",\n` +
      `    "scoringCriteria": ["understanding of TypeScript integration", "examples provided", "relevance to React's state management"]\n` +
      '  },\n' +
      '  {\n' +
      '    "id": "q4",\n' +
      '    "question": "Imagine you are working on a project with tight deadlines and you encounter a disagreement with a team member about the best way to implement a feature. How would you handle the situation?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      `    "expectedAnswer": "The candidate should express the importance of collaboration, suggesting open communication, seeking to understand the other person's viewpoint, and finding a compromise or consulting the team lead if necessary.",\n` +
      '    "scoringCriteria": ["communication skills", "conflict resolution approach", "teamwork emphasis"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q5",\n' +
      '    "question": "What performance optimizations would you consider when building a React application? Can you give specific examples?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Optimizations such as code splitting, lazy loading components, using memoization, and avoiding unnecessary re-renders with React.memo or useCallback.",\n' +
      '    "scoringCriteria": ["depth of knowledge on performance optimization", "specificity of examples", "practical application understanding"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:10:30'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '18215ms',
  success: false,
  attempt: 2,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:10:30'
}
{
  message: 'Application Error Unexpected token \'`\', "```json\n[\n"... is not valid JSON',
  stack: 'SyntaxError: Unexpected token \'`\', "```json\n' +
    '[\n' +
    '"... is not valid JSON\n' +
    '    at JSON.parse (<anonymous>)\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:101:19)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:84:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)',
  name: 'SyntaxError',
  context: {
    operation: 'parse_questions',
    content: '```json\n' +
      '[\n' +
      '  {\n' +
      '    "id": "q1",\n' +
      '    "question": "Can you explain how you would manage state in a React application using hooks?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Using useState for local state management and useEffect for side effects.",\n' +
      '    "scoringCriteria": ["clarity of explanation", "understanding of hooks", "practical examples"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q2",\n' +
      '    "question": "Describe a challenging bug you encountered in a frontend project. How did you approach resolving it?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Identifying the root cause, debugging systematically, and testing the solution.",\n' +
      '    "scoringCriteria": ["problem-solving skills", "communication of the process", "reflection on learning"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q3",\n' +
      '    "question": "How would you optimize a React application for performance? Can you give specific techniques?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "Using React.memo, lazy loading components, and minimizing re-renders.",\n' +
      '    "scoringCriteria": ["specificity of techniques", "understanding of performance metrics", "practical application"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q4",\n' +
      '    "question": "Imagine you are working on a team project. How would you handle disagreements with a teammate on the implementation of a feature?",\n' +
      '    "type": "behavioral",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "I would initiate a discussion to understand their perspective and seek a compromise or involve a third party if necessary.",\n' +
      '    "scoringCriteria": ["conflict resolution skills", "teamwork orientation", "communication skills"]\n' +
      '  },\n' +
      '  {\n' +
      '    "id": "q5",\n' +
      '    "question": "What is TypeScript‚Äôs advantage over JavaScript in a React project? Can you provide an example where TypeScript improves code quality?",\n' +
      '    "type": "technical",\n' +
      '    "difficulty": "medium",\n' +
      '    "expectedAnswer": "TypeScript provides type safety, reducing runtime errors; for example, defining props types in components.",\n' +
      '    "scoringCriteria": ["understanding of TypeScript benefits", "clarity of examples", "knowledge of best practices"]\n' +
      '  }\n' +
      ']\n' +
      '```'
  },
  level: 'error',
  timestamp: '2025-08-23 18:10:42'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '29390ms',
  success: false,
  attempt: 3,
  error: 'Failed to parse questions response',
  level: 'warn',
  message: 'External API Call',
  timestamp: '2025-08-23 18:10:42'
}
{
  message: 'Application Error Failed to parse questions response',
  stack: 'Error: Failed to parse questions response\n' +
    '    at QuestionGenerationService.parseJsonResponse (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:107:13)\n' +
    '    at QuestionGenerationService.generateInterviewQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:84:28)\n' +
    '    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at async QuestionGenerationService.withRetry (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/base-ai.service.ts:35:24)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/ai/question-generation.service.ts:31:22)\n' +
    '    at async QuestionGenerationRepository.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/repositories/question-generation.repository.ts:41:22)\n' +
    '    at async QuestionGenerationService.generateQuestions (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation.service.ts:33:25)\n' +
    '    at async Worker.worker.Worker.connection (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/services/backend/src/services/question-generation-queue.service.ts:223:29)\n' +
    '    at async <anonymous> (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:880:26)\n' +
    '    at async Worker.retryIfFailed (/home/abdelrahman_aboalkhair/dev/workspace/smart-recruiter-refactored/node_modules/bullmq/src/classes/worker.ts:1249:16)',
  name: 'Error',
  context: { operation: 'generate_questions', attempts: 3 },
  level: 'error',
  timestamp: '2025-08-23 18:10:42'
}
{
  error: 'Failed to parse questions response',
  request: {
    jobTitle: 'Frontend Developer',
    skills: [ 'JavaScript', 'React', 'TypeScript' ],
    count: 5,
    difficulty: 'medium',
    type: 'mixed'
  },
  duration: 29523,
  level: 'error',
  message: 'Failed to generate questions',
  timestamp: '2025-08-23 18:10:42'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:12:41'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:12:41'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:12:53'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:12:53'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:13:00'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:13:00'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:13:16'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:13:16'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 18:14:05'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 18:14:05'
}
{
  operation: 'cache_get',
  duration: '527ms',
  key: 'smart-recruiter:smart-recruiter:questions:6d7e24c7',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:14:05'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '6539ms',
  success: true,
  attempt: 1,
  level: 'info',
  message: 'External API Call',
  timestamp: '2025-08-23 18:14:11'
}
{
  operation: 'cache_set',
  duration: '65ms',
  key: 'smart-recruiter:smart-recruiter:questions:6d7e24c7',
  ttl: 7200,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:14:11'
}
{
  operation: 'questions_generated',
  duration: '7133ms',
  jobTitle: 'Frontend Developer',
  count: 3,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:14:11'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:16:07'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:16:07'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:16:09'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:16:09'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 18:16:21'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 18:16:21'
}
{
  operation: 'cache_get',
  duration: '435ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:16:21'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '8872ms',
  success: true,
  attempt: 1,
  level: 'info',
  message: 'External API Call',
  timestamp: '2025-08-23 18:16:30'
}
{
  operation: 'cache_set',
  duration: '72ms',
  key: 'smart-recruiter:smart-recruiter:questions:cdbd22ab',
  ttl: 7200,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:16:30'
}
{
  operation: 'questions_generated',
  duration: '9382ms',
  jobTitle: 'Frontend Developer',
  count: 5,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:16:30'
}
{
  operation: 'cache_get',
  duration: '74ms',
  key: 'smart-recruiter:smart-recruiter:questions:b62d6d06',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:26:23'
}
{
  service: 'openai',
  operation: 'generate_questions',
  duration: '17009ms',
  success: true,
  attempt: 1,
  level: 'info',
  message: 'External API Call',
  timestamp: '2025-08-23 18:26:40'
}
{
  operation: 'cache_set',
  duration: '70ms',
  key: 'smart-recruiter:smart-recruiter:questions:b62d6d06',
  ttl: 7200,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:26:40'
}
{
  operation: 'questions_generated',
  duration: '17156ms',
  jobTitle: 'Backend Developer',
  count: 10,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:26:40'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:27:15'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:27:15'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:27:25'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:27:25'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:27:25'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:27:25'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:27:43'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:27:43'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:27:43'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:27:43'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:31:43'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:31:43'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:31:43'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:31:43'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 18:33:17'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 18:33:17'
}
{
  operation: 'cache_get',
  duration: '16295ms',
  key: 'smart-recruiter:smart-recruiter:cv_analysis:4f1f9d87',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:33:18'
}
{
  service: 'openai',
  operation: 'cv_analysis',
  duration: '6416ms',
  success: true,
  attempt: 1,
  level: 'info',
  message: 'External API Call',
  timestamp: '2025-08-23 18:33:24'
}
{
  operation: 'cache_set',
  duration: '80ms',
  key: 'smart-recruiter:smart-recruiter:cv_analysis:4f1f9d87',
  ttl: 3600,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:33:24'
}
{
  userId: 'anonymous',
  duration: 22793,
  level: 'info',
  message: 'CV analysis generated successfully',
  timestamp: '2025-08-23 18:33:24'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:33:54'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:33:54'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:33:54'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:33:54'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 18:34:00'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 18:34:01'
}
{
  operation: 'cache_get',
  duration: '672ms',
  key: 'smart-recruiter:smart-recruiter:cv_analysis:4f1f9d87',
  hit: true,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:34:01'
}
{
  userId: 'anonymous',
  duration: 673,
  level: 'info',
  message: 'CV analysis retrieved from cache',
  timestamp: '2025-08-23 18:34:01'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:46:42'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:46:42'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:46:42'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:46:42'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:46:51'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:46:51'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:46:51'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:46:51'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:47:01'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:47:01'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:47:01'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:47:01'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:47:01'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:47:01'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:47:11'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:47:11'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:47:11'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:47:11'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:47:11'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:47:11'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 18:48:13'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 18:48:13'
}
{
  operation: 'cache_get',
  duration: '402ms',
  key: 'smart-recruiter:smart-recruiter:job_requirements:48d6b4aa',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:48:13'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:48:24'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:48:24'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:48:24'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:48:24'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:48:24'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:48:24'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:48:55'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:48:55'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:48:55'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:48:55'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:48:55'
}
{
  message: 'BaseAI service initialized',
  level: 'info',
  timestamp: '2025-08-23 18:48:55'
}
{
  message: 'Redis client connected',
  level: 'info',
  timestamp: '2025-08-23 18:49:25'
}
{
  message: 'Redis client ready',
  level: 'info',
  timestamp: '2025-08-23 18:49:25'
}
{
  operation: 'cache_get',
  duration: '339ms',
  key: 'smart-recruiter:smart-recruiter:job_requirements:48d6b4aa',
  hit: false,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:49:25'
}
{
  service: 'openai',
  operation: 'job_requirements',
  duration: '18803ms',
  success: true,
  attempt: 1,
  level: 'info',
  message: 'External API Call',
  timestamp: '2025-08-23 18:49:44'
}
{
  operation: 'cache_set',
  duration: '72ms',
  key: 'smart-recruiter:smart-recruiter:job_requirements:48d6b4aa',
  ttl: 14400,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:49:44'
}
{
  userId: 'anonymous',
  duration: 19217,
  level: 'info',
  message: 'Job requirements generated successfully',
  timestamp: '2025-08-23 18:49:44'
}
{
  operation: 'cache_get',
  duration: '58ms',
  key: 'smart-recruiter:smart-recruiter:job_requirements:48d6b4aa',
  hit: true,
  level: 'info',
  message: 'Performance Metric',
  timestamp: '2025-08-23 18:49:44'
}
{
  userId: 'anonymous',
  duration: 58,
  level: 'info',
  message: 'Job requirements retrieved from cache',
  timestamp: '2025-08-23 18:49:44'
}
