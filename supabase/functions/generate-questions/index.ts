Deno.serve(async (req) => {
  const corsHeaders = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers":
      "authorization, x-client-info, apikey, content-type",
    "Access-Control-Allow-Methods": "POST, GET, OPTIONS, PUT, DELETE, PATCH",
    "Access-Control-Max-Age": "86400",
    "Access-Control-Allow-Credentials": "false",
  };

  if (req.method === "OPTIONS") {
    return new Response(null, { status: 200, headers: corsHeaders });
  }

  try {
    console.log("=== Generate Questions Started ===");

    // Parse request body
    const requestBody = await req.text();
    let bodyData;
    try {
      bodyData = JSON.parse(requestBody);
    } catch (parseError) {
      console.error("JSON parse error:", parseError);
      throw new Error("Invalid JSON in request body");
    }

    // Get environment variables
    const serviceRoleKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
    const supabaseUrl = Deno.env.get("SUPABASE_URL");
    const openaiApiKey = Deno.env.get("OPENAI_API");

    if (!serviceRoleKey || !supabaseUrl || !openaiApiKey) {
      throw new Error("Environment settings not available");
    }

    // Extract data from request
    const { interviewId, numQuestions = 5 } = bodyData;

    // Validate required fields
    if (!interviewId) {
      throw new Error("Interview ID is required");
    }

    // Get user from auth header
    const authHeader = req.headers.get("authorization");
    if (!authHeader) {
      throw new Error("Authorization header missing");
    }

    // Verify token and get user
    const userResponse = await fetch(`${supabaseUrl}/auth/v1/user`, {
      headers: {
        Authorization: authHeader,
        apikey: serviceRoleKey,
      },
    });

    if (!userResponse.ok) {
      throw new Error("Invalid authorization token");
    }

    const userData = await userResponse.json();
    const actualUserId = userData.id;

    // Get interview details
    const interviewResponse = await fetch(
      `${supabaseUrl}/rest/v1/interviews?id=eq.${interviewId}&user_id=eq.${actualUserId}`,
      {
        headers: {
          Authorization: `Bearer ${serviceRoleKey}`,
          apikey: serviceRoleKey,
        },
      }
    );

    if (!interviewResponse.ok) {
      throw new Error("Failed to fetch interview details");
    }

    const interviews = await interviewResponse.json();
    if (!interviews || interviews.length === 0) {
      throw new Error("Interview not found or access denied");
    }

    const interview = interviews[0];
    console.log("Generating questions for interview:", interview);

    // Generate questions using OpenAI
    const prompt = `Generate ${numQuestions} professional interview questions for a ${
      interview.interview_type
    } interview for the position of "${interview.job_title}".

Job Description: ${interview.job_description || "Not provided"}

Requirements:
1. Questions should be relevant to the job title and description
2. Mix of technical, behavioral, and situational questions
3. Questions should be clear and professional
4. Each question should be on a separate line
5. Number each question (1, 2, 3, etc.)

Please provide only the questions, one per line, without any additional text or formatting.`;

    console.log("Sending prompt to OpenAI:", prompt);

    const openaiResponse = await fetch(
      "https://api.openai.com/v1/chat/completions",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${openaiApiKey}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "gpt-4o",
          messages: [
            {
              role: "user",
              content: prompt,
            },
          ],
          max_tokens: 1000,
          temperature: 0.7,
        }),
      }
    );

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text();
      console.error("OpenAI API error:", errorText);
      throw new Error("Failed to generate questions with AI");
    }

    const openaiData = await openaiResponse.json();
    const generatedText = openaiData.choices[0]?.message?.content;

    if (!generatedText) {
      throw new Error("No questions generated by AI");
    }

    // Parse the generated questions
    const questions = generatedText
      .split("\n")
      .map((line) => line.trim())
      .filter((line) => line.length > 0)
      .map((line) => line.replace(/^\d+\.\s*/, "")) // Remove numbering
      .slice(0, numQuestions); // Limit to requested number

    console.log("Generated questions:", questions);

    // Save questions to database
    const questionsToSave = questions.map((question, index) => ({
      interview_id: interviewId,
      question_text: question,
      question_type: "general", // Default type
      is_ai_generated: true,
      order_index: index + 1,
    }));

    // Delete existing AI-generated questions for this interview
    await fetch(
      `${supabaseUrl}/rest/v1/interview_questions?interview_id=eq.${interviewId}&is_ai_generated=eq.true`,
      {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${serviceRoleKey}`,
          apikey: serviceRoleKey,
        },
      }
    );

    // Insert new questions
    const saveResponse = await fetch(
      `${supabaseUrl}/rest/v1/interview_questions`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${serviceRoleKey}`,
          apikey: serviceRoleKey,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(questionsToSave),
      }
    );

    if (!saveResponse.ok) {
      const errorText = await saveResponse.text();
      console.error("Failed to save questions:", errorText);
      throw new Error("Failed to save generated questions");
    }

    const savedQuestions = await saveResponse.json();
    console.log("âœ… Questions saved successfully:", savedQuestions);

    // Update interview status
    await fetch(`${supabaseUrl}/rest/v1/interviews?id=eq.${interviewId}`, {
      method: "PATCH",
      headers: {
        Authorization: `Bearer ${serviceRoleKey}`,
        apikey: serviceRoleKey,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        status: "questions_ready",
        updated_at: new Date().toISOString(),
      }),
    });

    return new Response(
      JSON.stringify({
        success: true,
        data: {
          questions: savedQuestions,
          count: questions.length,
        },
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  } catch (error) {
    console.error("Generate Questions error:", error);

    const errorResponse = {
      success: false,
      error: {
        code: "GENERATE_QUESTIONS_ERROR",
        message:
          error.message ||
          "An unexpected error occurred while generating questions",
      },
    };

    return new Response(JSON.stringify(errorResponse), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});
